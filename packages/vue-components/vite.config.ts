import { ConfigEnv, UserConfig, defineConfig } from 'vite';
import { createVitePlugins } from './build/vite/plugin';
import { loadEnv } from 'vite';
import { wrapperEnv } from './build/utils';

const path = require('path');

function pathResolve(dir: string) {
  return path.resolve(process.cwd(), '.', dir);
}
/**
 * @type {import('vite').UserConfig}
 */
module.exports = defineConfig(({ command, mode }: ConfigEnv): UserConfig => {
  const env = loadEnv(mode, process.cwd());
  // The boolean type read by loadEnv is a string. This function can be converted to boolean type
  const viteEnv = wrapperEnv(env);

  const isBuild = command === 'build';
  return {
    plugins: createVitePlugins(viteEnv, isBuild), // to process SFC
    resolve: {
      alias: [
        {
          find: /@\//,
          replacement: pathResolve('src') + '/',
        },
      ],
    },
    build: {
      sourcemap: true,
      lib: {
        entry: path.resolve(__dirname, 'src/index.ts'),
        name: 'yakies-components',
        formats: ['es'], // adding 'umd' requires globals set to every external module
        fileName: (format) => `aea-components.${format}.js`,
      },
      rollupOptions: {
        // external modules won't be bundled into your library
        external: ['vue', 'ant-design-vue', 'pinia','vant'], // not every external has a global
        output: {
          // disable warning on src/index.ts using both default and named export
          exports: 'named',
          // Provide global variables to use in the UMD build
          // for externalized deps (not useful if 'umd' is not in lib.formats)
          globals: {
            vue: 'Vue',
          },
        },
      },
      emptyOutDir: false, // to retain the types folder generated by tsc
    },
  }
});
