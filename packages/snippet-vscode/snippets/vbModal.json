{
    "vbModalKey": {
        "prefix": "vbmodalform",
        "body": [
          "<template>",
          "  <BasicModal",
          "    @register=\"registerModal\"",
          "    showFooter",
          "    :title=\"getTitle\"",
          "    :isDetail=\"true\"",
          "    @ok=\"handleSubmit\"",
          "  >",
          "    <BasicForm @register=\"registerForm\" :compact=\"false\" />",
          "  </BasicModal>",
          "</template>",
          "<script lang=\"ts\">",
          "  import { defineComponent, computed, reactive, toRefs, onMounted } from 'vue';",
          "  import { BasicForm, useForm } from '/@/components/Form/index';",
          "  import { formSchema } from './role.data';",
          "  import { BasicModal, useModalInner } from '/@/components/Modal';",
          "  import { useMessage } from '/@/hooks/web/useMessage';",
          "  export default defineComponent({",
          "    name: '$1Demo',",
          "    components: {",
          "      BasicModal,",
          "      BasicForm,",
          "    },",
          "    emits: ['success', 'register'],",
          "    setup(_, { emit }) {",
          "      const { createMessage } = useMessage();",
          "      let stateData = reactive({",
          "        isUpdate: false,",
          "      });",
          "      const [registerForm, { resetFields, setFieldsValue, getFieldsValue }] = useForm({",
          "        labelWidth: 90,",
          "        schemas: formSchema(),",
          "        showActionButtonGroup: false,",
          "      });",
          "      const [registerModal, { setModalProps, closeModal }] = useModalInner(async (data) => {",
          "        resetFields();",
          "        setModalProps({ confirmLoading: false });",
          "        stateData.isUpdate = data.isUpdate;",
          "        if (data.isUpdate) {",
          "          setFieldsValue({",
          "            ...data,",
          "          });",
          "        }",
          "      });",
          "      const getTitle = computed(() => (!stateData.isUpdate ? 'add' : 'edit'));",
          "",
          "      async function handleSubmit() {",
          "        let values = getFieldsValue();",
          "        createMessage.success('add/iedit success');",
          "        emit('success', { ...values });",
          "        setModalProps({ confirmLoading: true });",
          "        closeModal();",
          "      }",
          "      onMounted(() => {});",
          "      return {",
          "        registerModal,",
          "        registerForm,",
          "        getTitle,",
          "        handleSubmit,",
          "        formSchema,",
          "        ...toRefs(stateData),",
          "      };",
          "    },",
          "    methods: {},",
          "  });",
          "</script>",
          ""
        ],
        "description": "vbModal"
      }
}